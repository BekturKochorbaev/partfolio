const Publication = require('../models/Publication');

// üì• –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
exports.create = async (req, res) => {
  try {
    const teacherId = req.user?.id;
    if (!teacherId) return res.status(401).json({ message: '–ù–µ—Ç teacherId –≤ —Ç–æ–∫–µ–Ω–µ.' });

    const record = await Publication.create({ ...req.body, teacherId });
    res.status(201).json(record);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏:", error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.', error });
  }
};

// üì§ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
exports.getAll = async (req, res) => {
  try {
    const { teacherId } = req.query;
    if (!teacherId) {
      return res.status(400).json({ message: '–ù–µ –ø–µ—Ä–µ–¥–∞–Ω teacherId.' });
    }

    const records = await Publication.findAll({ where: { teacherId } });
    res.status(200).json(records);
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π.', error });
  }
};

// ‚ôªÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
exports.update = async (req, res) => {
  try {
    const { id } = req.params;
    await Publication.update(req.body, { where: { id } });
    const updated = await Publication.findByPk(id);
    res.status(200).json(updated);
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.', error });
  }
};

// ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
exports.remove = async (req, res) => {
  try {
    const { id } = req.params;
    await Publication.destroy({ where: { id } });
    res.status(200).json({ message: '–£–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.' });
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.', error });
  }
};
