const fs = require("fs");
const path = require("path");
const ExpertActivity = require("../models/ExpertActivity");

// üì• –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
exports.create = async (req, res) => {
  try {
    const teacherId = req.user.id;

    const imageUrls = req.files?.map(file => `/uploads/experts/${file.filename}`) || [];

    const newRecord = await ExpertActivity.create({
      teacherId,
      competitionName: req.body.competitionName,
      role: req.body.role,
      participationDate: req.body.participationDate,
      organizer: req.body.organizer,
      images: imageUrls,
    });

    res.status(201).json(newRecord);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.", error });
  }
};

// üì§ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ teacherId
exports.getAll = async (req, res) => {
  try {
    const teacherId = req.user.id;
    const records = await ExpertActivity.findAll({ where: { teacherId } });
    res.status(200).json(records);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π.", error });
  }
};

// ‚ôªÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
exports.update = async (req, res) => {
  try {
    const record = await ExpertActivity.findByPk(req.params.id);
    if (!record) return res.status(404).json({ message: "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." });

    const existingFiles = JSON.parse(req.body.existingFiles || "[]");
    const newImages = req.files?.map(file => `/uploads/experts/${file.filename}`) || [];
    const updatedImages = [...existingFiles, ...newImages];

    await record.update({
      competitionName: req.body.competitionName,
      role: req.body.role,
      participationDate: req.body.participationDate,
      organizer: req.body.organizer,
      images: updatedImages,
    });

    res.status(200).json({ message: "–û–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ", record });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.", error });
  }
};

// üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ–π –∑–∞–ø–∏—Å–∏ –∏ –µ—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
exports.remove = async (req, res) => {
  try {
    const record = await ExpertActivity.findByPk(req.params.id);
    if (!record) return res.status(404).json({ message: "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." });

    record.images?.forEach((imgPath) => {
      const fullPath = path.join(__dirname, "..", imgPath);
      if (fs.existsSync(fullPath)) fs.unlinkSync(fullPath);
    });

    await record.destroy();
    res.status(200).json({ message: "–£–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ." });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.", error });
  }
};

// üñºÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
exports.removeImage = async (req, res) => {
  try {
    const { id, filename } = req.params;
    const record = await ExpertActivity.findByPk(id);
    if (!record) return res.status(404).json({ message: "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." });

    const updatedImages = (record.images || []).filter(img => !img.includes(filename));
    const filePath = path.join(__dirname, "..", "uploads", "experts", filename);
    if (fs.existsSync(filePath)) fs.unlinkSync(filePath);

    await record.update({ images: updatedImages });
    res.status(200).json({ message: "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ." });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", error });
  }
};

// üì§ –ü—É–±–ª–∏—á–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ teacherId (–¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è)
exports.getPublicByTeacherId = async (req, res) => {
  try {
    const { teacherId } = req.query;
    if (!teacherId) {
      return res.status(400).json({ error: "teacherId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
    }

    const records = await ExpertActivity.findAll({
      where: { teacherId }
    });

    res.status(200).json(records);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

