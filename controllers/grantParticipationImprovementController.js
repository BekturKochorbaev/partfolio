const fs = require("fs");
const path = require("path");
const GrantParticipation = require("../models/GrantParticipation");

// üì• –°–û–ó–î–ê–ù–ò–ï –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
exports.create = async (req, res) => {
  try {
    const {
      projectName,
      role,
      organization,
      startDate,
      endDate,
      status,
    } = req.body;

    const teacherId = req.user.id; // –∏–∑ —Ç–æ–∫–µ–Ω–∞

    const imageUrls = req.files?.map(file => `/uploads/grants/${file.filename}`) || [];

    const newRecord = await GrantParticipation.create({
      teacherId,
      projectName,
      role,
      organization,
      startDate,
      endDate,
      status,
      images: imageUrls,
    });

    res.status(201).json(newRecord);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.", error });
  }
};

// üì§ –ü–û–õ–£–ß–ï–ù–ò–ï –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ teacherId
// üì§ –ü–û–õ–£–ß–ï–ù–ò–ï –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ teacherId –∏–∑ —Ç–æ–∫–µ–Ω–∞
exports.getAll = async (req, res) => {
  try {
    const teacherId = req.user.id; // –ø–æ–ª—É—á–∞–µ–º –∏–∑ —Ç–æ–∫–µ–Ω–∞
    const records = await GrantParticipation.findAll({
      where: { teacherId },
    });
    res.status(200).json(records);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π.", error });
  }
};


// ‚ôªÔ∏è –û–ë–ù–û–í–õ–ï–ù–ò–ï –∑–∞–ø–∏—Å–∏
exports.update = async (req, res) => {
  try {
    const grant = await GrantParticipation.findByPk(req.params.id);
    if (!grant) return res.status(404).json({ message: "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." });

    // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã (JSON —Å—Ç—Ä–æ–∫–∞ ‚Üí –º–∞—Å—Å–∏–≤)
    const existingFiles = JSON.parse(req.body.existingFiles || "[]");

    // –ù–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const newImages = req.files?.map(file => `/uploads/grants/${file.filename}`) || [];

    const updatedImages = [...existingFiles, ...newImages];

    await grant.update({
      projectName: req.body.projectName,
      role: req.body.role,
      organization: req.body.organization,
      startDate: req.body.startDate,
      endDate: req.body.endDate,
      status: req.body.status,
      images: updatedImages,
    });

    res.status(200).json({ message: "–û–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ", grant });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.", error });
  }
};

// üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –≤—Å–µ–π –∑–∞–ø–∏—Å–∏ + —Ñ–∞–π–ª–æ–≤
exports.remove = async (req, res) => {
  try {
    const grant = await GrantParticipation.findByPk(req.params.id);
    if (!grant) return res.status(404).json({ message: "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." });

    grant.images?.forEach((imagePath) => {
      const fullPath = path.join(__dirname, "..", imagePath);
      if (fs.existsSync(fullPath)) fs.unlinkSync(fullPath);
    });

    await grant.destroy();
    res.status(200).json({ message: "–£–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ." });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.", error });
  }
};

// üñºÔ∏è –£–î–ê–õ–ï–ù–ò–ï –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
exports.removeImage = async (req, res) => {
  try {
    const { id, filename } = req.params;
    const grant = await GrantParticipation.findByPk(id);
    if (!grant) return res.status(404).json({ message: "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." });

    const updatedImages = (grant.images || []).filter(img => !img.includes(filename));
    const filePath = path.join(__dirname, "..", "uploads", "grants", filename);
    if (fs.existsSync(filePath)) fs.unlinkSync(filePath);

    await grant.update({ images: updatedImages });
    res.status(200).json({ message: "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ." });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", error });
  }
};

// –ü—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –ø–æ teacherId
exports.getAllPublic = async (req, res) => {
  try {
    const { teacherId } = req.query;
    if (!teacherId) {
      return res.status(400).json({ message: "–ù–µ —É–∫–∞–∑–∞–Ω teacherId." });
    }

    const records = await GrantParticipation.findAll({
      where: { teacherId },
    });

    res.status(200).json(records);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—É–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.", error });
  }
};
