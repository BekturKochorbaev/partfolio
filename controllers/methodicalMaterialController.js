const MethodicalMaterial = require('../models/MethodicalMaterial');
const fs = require('fs');
const path = require('path');

// üì• –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ —Å PDF-—Ñ–∞–π–ª–∞–º–∏
const create = async (req, res) => {
  try {
    const { title, type, year } = req.body;
    const teacherId = req.user.id;

    const files = req.files || [];
    const savedFiles = files.map(file => `/uploads/methodical/${file.filename}`);

    const record = await MethodicalMaterial.create({
      teacherId,
      title,
      type,
      year,
      documentFiles: savedFiles,
    });

    res.status(201).json(record);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.', error });
  }
};

// üì§ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
const getAll = async (req, res) => {
  try {
    const records = await MethodicalMaterial.findAll({
      where: { teacherId: req.query.teacherId }
    });
    res.status(200).json(records);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π.', error });
  }
};

// ‚ôªÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ–π –∑–∞–º–µ–Ω–æ–π —Ñ–∞–π–ª–æ–≤
const update = async (req, res) => {
  try {
    const { id } = req.params;
    const record = await MethodicalMaterial.findByPk(id);

    if (!record) {
      return res.status(404).json({ message: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.' });
    }

    let updatedFiles = record.documentFiles || [];

    // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã ‚Äî –∑–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ
    if (req.files && req.files.length > 0) {
      updatedFiles.forEach(filePath => {
        const fullPath = path.join(__dirname, '..', filePath);
        if (fs.existsSync(fullPath)) fs.unlinkSync(fullPath);
      });

      updatedFiles = req.files.map(file => `/uploads/methodical/${file.filename}`);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
    await record.update({
      title: req.body.title,
      type: req.body.type,
      year: req.body.year,
      documentFiles: updatedFiles,
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
    res.status(200).json(record);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.', error });
  }
};

// ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
const remove = async (req, res) => {
  try {
    const { id } = req.params;
    const record = await MethodicalMaterial.findByPk(id);

    if (!record) {
      return res.status(404).json({ message: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.' });
    }

    if (Array.isArray(record.documentFiles)) {
      record.documentFiles.forEach(filePath => {
        const fullPath = path.join(__dirname, '..', filePath);
        if (fs.existsSync(fullPath)) fs.unlinkSync(fullPath);
      });
    }

    await record.destroy();
    res.status(200).json({ message: '–£–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.', error });
  }
};

// ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
const removeSingleFile = async (req, res) => {
  try {
    const { id, filename } = req.params;
    const record = await MethodicalMaterial.findByPk(id);

    if (!record) {
      return res.status(404).json({ message: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.' });
    }

    const fileToDelete = record.documentFiles?.find(f => f.endsWith(filename));
    if (!fileToDelete) {
      return res.status(404).json({ message: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.' });
    }

    const fullPath = path.join(__dirname, '..', fileToDelete);
    if (fs.existsSync(fullPath)) fs.unlinkSync(fullPath);

    const updatedFiles = record.documentFiles.filter(f => f !== fileToDelete);
    await record.update({ documentFiles: updatedFiles });

    res.status(200).json({ message: '–§–∞–π–ª —É–¥–∞–ª—ë–Ω —É—Å–ø–µ—à–Ω–æ.' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.', error });
  }
};

// üîì –ü—É–±–ª–∏—á–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ teacherId
const getPublicByTeacherId = async (req, res) => {
  try {
    const { teacherId } = req.query;
    if (!teacherId) {
      return res.status(400).json({ message: "–ù–µ —É–∫–∞–∑–∞–Ω teacherId." });
    }

    const records = await MethodicalMaterial.findAll({
      where: { teacherId },
    });

    res.status(200).json(records);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—É–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.", error });
  }
};


module.exports = {
  create,
  getAll,
  update,
  remove,
  removeSingleFile,
  getPublicByTeacherId,
};
