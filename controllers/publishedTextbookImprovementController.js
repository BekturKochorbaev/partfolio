const fs = require("fs");
const path = require("path");
const PublishedTextbook = require("../models/PublishedTextbook");

// üì• –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ —Å —Ñ–∞–π–ª–∞–º–∏
exports.create = async (req, res) => {
  try {
    const { title, coAuthors, moeTitle, year, publisher, isbn } = req.body;

    const fileUrls = req.files?.map(file => `/uploads/textbooks/${file.filename}`) || [];

    const newRecord = await PublishedTextbook.create({
      teacherId: req.user.id, // ‚úÖ –ø–æ–ª—É—á–∞–µ–º teacherId –∏–∑ —Ç–æ–∫–µ–Ω–∞
      title,
      coAuthors,
      moeTitle, // ‚úÖ –Ω–æ–≤–æ–µ –ø–æ–ª–µ
      year,
      publisher,
      isbn,
      files: fileUrls,
    });

    res.status(201).json(newRecord);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.", error });
  }
};

// üì§ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ teacherId
exports.getAll = async (req, res) => {
  try {
    const records = await PublishedTextbook.findAll({
      where: { teacherId: req.user.id },
    });
    res.status(200).json(records);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π.", error });
  }
};

// ‚ôªÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ + –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
exports.update = async (req, res) => {
  try {
    const textbook = await PublishedTextbook.findByPk(req.params.id);
    if (!textbook) return res.status(404).json({ message: "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." });

    const { title, coAuthors, moeTitle, year, publisher, isbn } = req.body;
    const newFiles = req.files?.map(file => `/uploads/textbooks/${file.filename}`) || [];
    const updatedFiles = [...(textbook.files || []), ...newFiles];

    await textbook.update({
      title,
      coAuthors,
      moeTitle, // ‚úÖ –Ω–æ–≤–æ–µ –ø–æ–ª–µ
      year,
      publisher,
      isbn,
      files: updatedFiles,
    });

    res.status(200).json({ message: "–û–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.", textbook });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.", error });
  }
};

// ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ–π –∑–∞–ø–∏—Å–∏ + —Ñ–∞–π–ª–æ–≤
exports.remove = async (req, res) => {
  try {
    const textbook = await PublishedTextbook.findByPk(req.params.id);
    if (!textbook) return res.status(404).json({ message: "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." });

    textbook.files?.forEach(filePath => {
      const fullPath = path.join(__dirname, "..", filePath);
      if (fs.existsSync(fullPath)) fs.unlinkSync(fullPath);
    });

    await textbook.destroy();

    res.status(200).json({ message: "–£–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ." });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.", error });
  }
};

// ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞
exports.removeFile = async (req, res) => {
  try {
    const { id, filename } = req.params;

    const textbook = await PublishedTextbook.findByPk(id);
    if (!textbook) return res.status(404).json({ message: "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." });

    const updatedFiles = (textbook.files || []).filter(file => !file.includes(filename));

    const filePath = path.join(__dirname, "..", "uploads", "textbooks", filename);
    if (fs.existsSync(filePath)) fs.unlinkSync(filePath);

    await textbook.update({ files: updatedFiles });

    res.status(200).json({ message: "–§–∞–π–ª —É–¥–∞–ª—ë–Ω." });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.", error });
  }
};

// üåê –ü—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –ø–æ teacherId
exports.getAllPublic = async (req, res) => {
  try {
    const { teacherId } = req.query;
    if (!teacherId) {
      return res.status(400).json({ message: "–ù–µ —É–∫–∞–∑–∞–Ω teacherId." });
    }

    const records = await PublishedTextbook.findAll({
      where: { teacherId },
    });

    res.status(200).json(records);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—É–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.", error });
  }
};
