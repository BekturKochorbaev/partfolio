const QualificationImprovement = require('../models/QualificationImprovement');
const fs = require('fs');
const path = require('path');

// ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–∞–π–ª–æ–≤
exports.create = async (req, res) => {
  try {
    const { courseName, organization, completionDate } = req.body;
    const teacherId = req.user.id;

    const documentFiles = req.files ? req.files.map(file => `/uploads/qualification/${file.filename}`) : [];

    const newRecord = await QualificationImprovement.create({
      teacherId,
      courseName,
      organization,
      completionDate,
      documentFiles,
    });

    res.status(201).json(newRecord);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.', error });
  }
};

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
exports.getAll = async (req, res) => {
  try {
    const records = await QualificationImprovement.findAll({
      where: { teacherId: req.query.teacherId }
    });
    res.status(200).json(records);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π.', error });
  }
};

// ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (—Å –∑–∞–º–µ–Ω–æ–π —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
exports.update = async (req, res) => {
  try {
    const { id } = req.params;
    const record = await QualificationImprovement.findByPk(id);
    if (!record) return res.status(404).json({ message: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.' });

    let currentFiles = Array.isArray(record.documentFiles) ? record.documentFiles : [];

    // üîÑ –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ (–Ω–µ—É–¥–∞–ª—ë–Ω–Ω—ã–µ) —Ñ–∞–π–ª—ã —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const existingFiles = req.body.existingFiles ? JSON.parse(req.body.existingFiles) : [];

    // üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    const filesToDelete = currentFiles.filter(f => !existingFiles.includes(f));
    for (const filePath of filesToDelete) {
      const fullPath = path.join(__dirname, '..', filePath);
      if (fs.existsSync(fullPath)) fs.unlinkSync(fullPath);
    }

    // üì• –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ
    const newUploaded = req.files?.map(file => `/uploads/qualification/${file.filename}`) || [];

    const updatedDocumentFiles = [...existingFiles, ...newUploaded];

    await record.update({
      courseName: req.body.courseName,
      organization: req.body.organization,
      completionDate: req.body.completionDate,
      documentFiles: updatedDocumentFiles,
    });

    res.status(200).json(record);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.', error });
  }
};


// ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ–π –∑–∞–ø–∏—Å–∏ –≤–º–µ—Å—Ç–µ —Å —Ñ–∞–π–ª–∞–º–∏
exports.remove = async (req, res) => {
  try {
    const { id } = req.params;
    const record = await QualificationImprovement.findByPk(id);

    if (!record) {
      return res.status(404).json({ message: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.' });
    }

    if (Array.isArray(record.documentFiles)) {
      record.documentFiles.forEach(filePath => {
        const fullPath = path.join(__dirname, '..', filePath);
        if (fs.existsSync(fullPath)) {
          fs.unlinkSync(fullPath);
        }
      });
    }

    await QualificationImprovement.destroy({ where: { id } });

    res.status(200).json({ message: '–£–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.', error });
  }
};

// ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
exports.removeSingleFile = async (req, res) => {
  try {
    const { id, filename } = req.params;
    const record = await QualificationImprovement.findByPk(id);

    if (!record) {
      return res.status(404).json({ message: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.' });
    }

    const updatedFiles = (record.documentFiles || []).filter(filePath => !filePath.endsWith(filename));

    const filePathToDelete = (record.documentFiles || []).find(filePath => filePath.endsWith(filename));
    if (filePathToDelete) {
      const fullPath = path.join(__dirname, '..', filePathToDelete);
      if (fs.existsSync(fullPath)) {
        fs.unlinkSync(fullPath);
      }
    }

    await QualificationImprovement.update(
      { documentFiles: updatedFiles },
      { where: { id } }
    );

    res.status(200).json({ message: '–§–∞–π–ª —É–¥–∞–ª—ë–Ω —É—Å–ø–µ—à–Ω–æ.' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.', error });
  }
};

exports.getPublicByTeacherId = async (req, res) => {
  try {
    const { teacherId } = req.query;
    if (!teacherId) {
      return res.status(400).json({ message: "–ù–µ —É–∫–∞–∑–∞–Ω teacherId" });
    }

    const trainings = await QualificationImprovement.findAll({
      where: { teacherId },
    });

    res.json(trainings);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π:", err);
    res.status(500).json({ message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

