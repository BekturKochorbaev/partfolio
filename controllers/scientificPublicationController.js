const ScientificPublication = require('../models/ScientificPublication');

// üëâ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
exports.create = async (req, res) => {
  try {
    const teacherId = req.user?.id || req.body.teacherId;

    const {
      publicationTitle,
      journalName,
      publicationYear,
      doi,
      indexing,
      orcidId,
      scopusId,
      elibraryId,
    } = req.body;

    if (!teacherId || !publicationTitle || !journalName || !publicationYear) {
      return res.status(400).json({ message: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.' });
    }

    const newRecord = await ScientificPublication.create({
      teacherId,
      publicationTitle,
      journalName,
      publicationYear: Number(publicationYear),
      doi,
      indexing,
      orcidId,
      scopusId,
      elibraryId,
      createdAt: new Date(),      // ‚úÖ –≤—Ä—É—á–Ω—É—é –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
      updatedAt: new Date()
    });

    return res.status(201).json(newRecord);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:', error);
    return res.status(500).json({
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.',
      error: error.message,
    });
  }
};

// üëâ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π (–¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
exports.getAll = async (req, res) => {
  try {
    const { teacherId } = req.query;

    if (!teacherId) {
      return res.status(400).json({ message: 'teacherId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.' });
    }

    const records = await ScientificPublication.findAll({
      where: { teacherId },
      order: [['publicationYear', 'DESC']],
    });

    return res.status(200).json(records);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π:', error);
    return res.status(500).json({
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π.',
      error: error.message,
    });
  }
};

// üëâ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
exports.getPublic = async (req, res) => {
  try {
    const { teacherId } = req.query;

    if (!teacherId) {
      return res.status(400).json({ message: '–ù–µ —É–∫–∞–∑–∞–Ω teacherId.' });
    }

    const records = await ScientificPublication.findAll({
      where: { teacherId },
      order: [['publicationYear', 'DESC']],
    });

    return res.status(200).json(records);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—É–±–ª–∏—á–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π:', error);
    return res.status(500).json({
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π.',
      error: error.message,
    });
  }
};

// üëâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
exports.update = async (req, res) => {
  try {
    const { id } = req.params;

    await ScientificPublication.update(
      { ...req.body, updatedAt: new Date() },
      { where: { id } }
    );

    const updated = await ScientificPublication.findByPk(id);

    if (!updated) {
      return res.status(404).json({ message: '–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.' });
    }

    return res.status(200).json(updated);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:', error);
    return res.status(500).json({
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.',
      error: error.message,
    });
  }
};

// üëâ –£–¥–∞–ª–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
exports.remove = async (req, res) => {
  try {
    const { id } = req.params;

    const deleted = await ScientificPublication.destroy({ where: { id } });

    if (!deleted) {
      return res.status(404).json({ message: '–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.' });
    }

    return res.status(200).json({ message: '–ü—É–±–ª–∏–∫–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞.' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:', error);
    return res.status(500).json({
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.',
      error: error.message,
    });
  }
};
