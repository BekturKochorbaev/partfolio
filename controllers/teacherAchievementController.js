const fs = require("fs");
const path = require("path");
const TeacherAchievement = require("../models/TeacherAchievement");

// üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–ª–∏–±–æ –ø–æ —Ç–æ–∫–µ–Ω—É, –ª–∏–±–æ –ø–æ ?teacherId=...)
exports.getAllAchievements = async (req, res) => {
  try {
    const teacherId = req.query.teacherId || req.user?.id;
    if (!teacherId) {
      return res.status(400).json({ message: "–ù–µ —É–∫–∞–∑–∞–Ω teacherId" });
    }

    const achievements = await TeacherAchievement.findAll({
      where: { teacherId },
      order: [["createdAt", "DESC"]],
    });
    res.json(achievements);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π" });
  }
};

// üîπ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
exports.createAchievement = async (req, res) => {
  try {
    const { title, description, date } = req.body;
    const files = req.files || [];

    if (!title || title.trim() === "") {
      return res.status(400).json({ message: "–ü–æ–ª–µ '–ù–∞–∑–≤–∞–Ω–∏–µ' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ" });
    }

    const filenames = files.map((file) => file.filename);

    const achievement = await TeacherAchievement.create({
      title: title.trim(),
      description: description?.trim() || "",
      date: date || null,
      images: JSON.stringify(filenames),
      teacherId: req.user.id,
    });

    res.status(201).json(achievement);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", error: error.message });
  }
};

// üîπ –û–±–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Å –∑–∞–º–µ–Ω–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
exports.updateAchievement = async (req, res) => {
  try {
    const { id } = req.params;
    const { title, description, date } = req.body;
    const newFiles = req.files || [];

    const achievement = await TeacherAchievement.findOne({
      where: { id, teacherId: req.user.id },
    });

    if (!achievement) {
      return res.status(404).json({ message: "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });
    }

    if (newFiles.length && achievement.images) {
      const oldFilenames = JSON.parse(achievement.images);
      oldFilenames.forEach((filename) => {
        const filePath = path.join(__dirname, "../uploads/achievements", filename);
        if (fs.existsSync(filePath)) {
          fs.unlinkSync(filePath);
        }
      });
    }

    const newFilenames = newFiles.map((file) => file.filename);

    await achievement.update({
      title: title?.trim() || achievement.title,
      description: description?.trim() || achievement.description,
      date: date || achievement.date,
      images: newFiles.length ? JSON.stringify(newFilenames) : achievement.images,
    });

    res.json(achievement);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è" });
  }
};

// üîπ –£–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
exports.deleteAchievement = async (req, res) => {
  try {
    const { id } = req.params;

    const achievement = await TeacherAchievement.findOne({
      where: { id, teacherId: req.user.id },
    });

    if (!achievement) {
      return res.status(404).json({ message: "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });
    }

    if (achievement.images) {
      const filenames = JSON.parse(achievement.images);
      filenames.forEach((filename) => {
        const imagePath = path.join(__dirname, "../uploads/achievements", filename);
        if (fs.existsSync(imagePath)) {
          fs.unlinkSync(imagePath);
        }
      });
    }

    await achievement.destroy();
    res.json({ message: "‚úÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è" });
  }
};
